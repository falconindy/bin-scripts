#!/bin/bash

REPOHOME=${REPOHOME:-$HOME}
FORCE=0
VERBOSE=0

count=0
declare -a fail
declare -a pass
declare -A output

usage() {
  echo "Usage: ${0##*/} [options] [command]"
  echo
  echo "   -S, --stat       Show repos which have uncommitted changes. If this"
  echo "                     option is specified, all other options are ignored."
  echo
  echo "   -f, --force      suppress prompting before a custom command is run"
  echo "   -v, --verbose    be verbose. show output for each repo"
  echo "   -h, --help       print this help message"
  echo
  echo " Actions will be performed on \$REPOHOME, which defaults to \$HOME"
  echo " if not specified."
  echo

  exit 1
}

msg() {
  local mesg=$1; shift
  printf " \033[1;32m==>\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
}

msg2() {
  local mesg=$1; shift
  printf " \033[1;34m  ->\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
}

repopass() {
  printf "\033[0;37m %-60s \033[1;0m\033[0;34m[\033[1;37mPASS\033[0;34m]\033[0m\n" "$1"
}

repofail() {
  printf "\033[0;37m %-60s \033[1;0m\033[0;34m[\033[1;31mFAIL\033[0;34m]\033[0m\n" "$1"
}

verify_execute() {
  if [[ $1 = "-f" ]]; then
    shift
  elif [[ $1 = "-v" ]]; then
    VERBOSE=1
    shift
  else
    msg "Command to be executed: $*"
    read -N1 -p " Are you sure you want to do this? [y/N] " reply
    echo;echo;

    [[ ! "$reply" =~ [Yy] ]] && exit 1
  fi
}

validate_command() {
  type -P $1 &> /dev/null || {
    echo "Invalid command: '$1'";
    exit 1;
  }
}

do_all_action() {
  IFS=$'\n' read -r -d $'\0' -a repos < <(find "$REPOHOME" -type d -name '.git')

  for repo in "${repos[@]}"; do
    (( count++ ))
    repo=${repo%/.git}
    cd "$repo"

    { if (( VERBOSE )); then
        msg2 "In '$repo'";
        output[$repo]=$("$@" 2>&1);
      else
        { output[$repo]=$("$@" 2>&1); } > /dev/null
    fi; } && pass=(${pass[@]} "$repo") || fail=(${fail[@]} "$repo")

  done
}

stat_repos() {
  while read repo; do
    repo="${repo%/.git}"
    cd "$repo"
    [[ -n $(git status -s | grep -v "^??") ]] && echo "$repo"
  done < <(find "$REPOHOME" -type d -name '.git') 

  exit
}

job_summary() {
  msg "Job Summary For $count Repos: $*"

  if [[ ${#fail[@]} -eq 0 ]]; then
    msg2 "No errors were reported"
  else
    for repo in "${fail[@]}"; do
      repofail "$repo"
      sed 's/^/   /' <<< "${output[$repo]}"
    done
  fi
  echo

  for repo in "${pass[@]}"; do
    repopass "$repo"
  done
  echo
}

[[ -z $1 ]] && usage

while (( $# != 0 )); do
  case $1 in
    -S|--stat)
      stat_repos
      ;;
    -h|--help)
      usage
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -f|--force)
      FORCE=1
      ;;
    *) break ;;
  esac
  shift
done

[[ -z $1 ]] && usage

[[ $# -ne 0 ]] && ! (( FORCE )) && verify_execute "$*" && validate_command "$1"
do_all_action "$@"
job_summary "$@"

