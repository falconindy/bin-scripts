#!/bin/bash
# Usage: git-all [-Sfhv] [command...]"
#
#   -S    Show repos which have uncommitted changes. If this"
#          option is specified, all other options are ignored."
#
#   -f    suppress prompting before a custom command is run"
#   -v    print error output in job summary for failed jobs"
#
# Actions will be performed on $REPOHOME, which defaults to $HOME"
# if not specified."
#

REPOHOME=${REPOHOME:-$HOME}
FORCE=0
VERBOSE=0

count=0
declare -a fail
declare -a pass
declare -A output

die() {
  local mesg=$1; shift
  printf "\033[1;31m::\033[0m ${mesg}\n" "$@" >&2
}

msg() {
  local mesg=$1; shift
  printf " \033[1;32m==>\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
}

msg2() {
  local mesg=$1; shift
  printf " \033[1;34m  ->\033[1;0m\033[1;1m ${mesg}\033[1;0m\n" "$@" >&2
}

repopass() {
  printf " \033[1;0m\033[0;34m[\033[1;37mPASS\033[0;34m] \033[0;36m %s\033[0m\n" "$1"
}

repofail() {
  printf " \033[1;0m\033[0;34m[\033[1;31mFAIL\033[0;34m] \033[0;36m %s\033[0m\n" "$1" >&2
}

verify_execute() {
  msg "Command to be executed: $*"
  echo -ne "\033[1;33m::\033[0m"
  read -N1 -p " Are you sure you want to do this? [y/N] " reply
  echo

  [[ ! "$reply" =~ [Yy] ]] && die "Operation aborted" && exit 1
}

validate_command() {
  type -P $1 &> /dev/null || {
    die "Invalid command: '$1'";
    exit 1;
  }
}

do_all_action() {
  IFS=$'\n' read -r -d $'\0' -a repos < <(find "$REPOHOME" -type d -name '.git' -exec readlink -f {} \;)

  for repo in "${repos[@]}"; do
    (( ++count ))
    local repo=${repo%.git}
    cd "$repo"

    output[$repo]=$("$@" 2>&1) &&
      pass=(${pass[@]} "$repo") || fail=(${fail[@]} "$repo")

  done
}

stat_repos() {
  IFS=$'\n' read -r -d $'\0' -a repos < <(find "$REPOHOME" -type d -name '.git' -exec readlink -f {} \;)

  for repo in "${repos[@]}"; do
    local repo="${repo%.git}"
    cd "$repo"
    [[ -n $(git status -s | grep -v "^??") ]] && echo "$repo"
  done
}

job_summary() {
  echo
  msg "Job Summary For $count Repos: $*"

  if [[ ${#fail[@]} -eq 0 ]]; then
    msg2 "No errors were reported"
  else
    for repo in "${fail[@]}"; do
      repofail "$repo"
      { (( VERBOSE )) && sed 's/^/   /' <<< "${output[$repo]}" && echo; } >&2
    done
  fi
  echo

  for repo in "${pass[@]}"; do
    repopass "$repo"
  done
  echo
}

# sanity check
[[ ! -r "$REPOHOME" ]] && die "Invalid \$REPOHOME: $REPOHOME" exit 1

while getopts :Sfv flag; do
  case $flag in
    S) stat_repos
       exit 0
      ;;
    f) FORCE=1
      ;;
    v) VERBOSE=1
      ;;
    \?) die "invalid option -- '$OPTARG'"
      ;;
  esac >&2
done

shift $(( OPTIND-1 ))

# check command line usage
if [[ -z $1 ]]; then
  sed -n '2,/^$/s/^# \?//p' "$0"
  exit 1
fi

# main loop
(( FORCE )) || verify_execute "$*"
validate_command "$1"
do_all_action "$@"
job_summary "$@"

