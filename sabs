#!/bin/bash
#
# fetch the latest PKGBUILD from Arch's SVN
#

shopt -s extglob

absroot=/var/abs
svnrepo="svn://svn.archlinux.org"
splitpkgcache=$HOME/.cache/splitpkg.cache

build_splitpkg_cache() {
  printf '==> building split package cache...\n' >&2
  [[ -d $HOME/.cache/ ]] || mkdir -p $HOME/.cache

  . /etc/makepkg.conf
  {
    echo "declare -A splitpkgdb"
    for p in "$absroot"/*/*/PKGBUILD; do
      (
        pkgdir=${p%/PKGBUILD}
        . "$pkgdir/PKGBUILD" 2>/dev/null
        for split in "${pkgname[@]}"; do
          printf "splitpkgdb[%s]=%s\n" "$split" "${pkgdir##*/}"
        done
      )
    done | sort -u
  } >"$splitpkgcache"
}

getrepo() {
  for f in "$absroot"/*; do
    if [[ -d $f/$1 ]]; then
      echo "${f##*/}"
      return 0
    fi
  done

  return 1
}

if [[ $1 = -@(r|-rebuild) ]]; then
  build_splitpkg_cache
  exit 0
fi

[[ -z $1 ]] && { printf "Usage: %s targets...\n" "${0##*/}"; exit 1; }
[[ ! -f $splitpkgcache && -d $absroot ]] && build_splitpkg_cache
[[ -s $splitpkgcache ]] && . "$splitpkgcache"

for pkg; do
  # check split package cache first
  provider=${splitcache[$pkg]}
  if [[ $provider && $pkg != "$provider" ]]; then
    printf '==> %s is built by %s\n' "$pkg" "${splitcache[$pkg]}"
    pkg=$provider
  fi

  if ! repo=$(getrepo "$pkg"); then
    printf "error: package \`%s' not found\n" "$pkg" >&2
    continue
  fi

  case $repo in
    @(community|multilib)*) repo=community ;;
    *) repo=packages ;;
  esac

  if [[ -d $pkg ]]; then
    printf "error: directory \`%s' already exists\n" "$pkg"
    continue
  fi

  svn export "$svnrepo/$repo/$pkg/trunk" $pkg >/dev/null &&
    printf ":: checked out %s\n" "$pkg" ||
    printf "error: failed to get package \`%s'\n" "$pkg"

done
